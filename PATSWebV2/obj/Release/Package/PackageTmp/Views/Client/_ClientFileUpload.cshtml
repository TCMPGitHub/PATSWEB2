@using Kendo.Mvc.UI
@using Kendo.Mvc.Extensions
@model PATSWebV2.ViewModels.Client.ClientEditViewModel
<style>
    .k-upload {
        width: 100%;
        height:40px;
    }
    .k-dropzone{
        margin-top:-10px;
    }
</style>
@using (Ajax.BeginForm("GetFilUpload", "Client", new { ActiveTab = "clientFileUpload" }, new AjaxOptions
{
    HttpMethod = "Post",
    UpdateTargetId = "viewPlaceHolder",
    InsertionMode = InsertionMode.Replace,
    OnSuccess = "OnAjaxSuccess",
    OnFailure = "OnAjaxFailure"
}, new { @id = "fileUploadForm", @name = "File upload", @style = "min-height: 400px;", @class = "color-primary" }))
{
<div id="fileuploadpane" class="color-primary"
      style="height:auto;background-color:#ADD8E6;width:99.8%">
    @Html.HiddenFor(m => m.EpisodeId, new { id = "hdEpisodeId" })
    @Html.HiddenFor(m => m.EditingEnabled, new { id = "hdEditingEnabled" })
        <script type="text/javascript">
            function onUploadSuccess() {
                // Force the rebinding of the Grid on successful upload
                $("#filesGrid").data("kendoGrid").dataSource.read({ EpisodeId: $("#hdEpisodeId").val() });
            }
        </script>

        @(Html.Kendo().Upload()
                   .Name("files")
                  .Async(a => a.Save("SaveUploadFile", "Client", new { EpisodeId = Model.EpisodeId }).AutoUpload(true))
                  .Events(e => e.Success("onUploadSuccess"))
                  .Validation(validation => { validation.MaxFileSize(1048576000); validation.AllowedExtensions(new string[] { ".pdf" }); })
                   .Messages(m => m.Select("Select File..."))
                  .Multiple(false)
                  .ShowFileList(true)  // Hide the file list as we're displaying uploaded files in the Grid
        )
    <script>
        function onDataBound(e) {
           var grid = e.sender; 
           if (grid != undefined && grid != null) {
               var edit = EditableEpisode("True");
               var gridData = grid.dataSource.view();
               for (var i = 0; i < gridData.length; i++) {
                   var currentUid = gridData[i].uid;
                   if (!edit) {
                       var currenRow = grid.table.find("tr[data-uid='" + currentUid + "']");
                       var dButton = $(currenRow).find(".k-grid-delete");
                       dButton.hide();
                   }
               }
           }
           if (!EditableEpisode($("#hdEditingEnabled").val()))
                    $(".k-upload-button").hide();
            
           if (document.getElementById('fileLink') != null) {
               if (e.sender._data.length > 0) {
                   document.getElementById('fileLink').style.visibility = '';
               }
               else {
                   document.getElementById('fileLink').style.visibility = 'hidden';
               }
           }
        }
       function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function() {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
            var grid = $("#filesGrid").data("kendoGrid");
            grid.one("dataBinding", function (e) {
                e.preventDefault();   // cancel grid rebind if error occurs                             
            });
        }
       }
      
       function CanDlete() {
           return !EditableEpisode($("#hdEditingEnabled").val());
       }
    </script>
       @(Html.Kendo().Grid<IdentityManagement.Entities.UploadedFiles>()
       .Name("filesGrid")
       .Events(e => { e.DataBound("onDataBound"); })
       .Columns(columns =>
       {
           columns.Bound(f => f.ID).Hidden();
           columns.Bound(f => f.UploadDate).Format("{0:MM/dd/yyyy hh:mm tt}").Title("Upload Date").Width(160);
           columns.Bound(f => f.FileName).ClientTemplate("<a href='ClientProfile/Download?id=#= ID #'>#= FileName #</a>").Title("File Name");
           columns.Bound(f => f.FileSize).Title("File Size (KB)").Width(150);
           //columns.Bound(f => f.FileData).ClientTemplate("\\#= FileSize#\\").Title("File size (KB)").Width(150);
           columns.Bound(f => f.UploadBy).Title("Upload By").Width(160);
           columns.Command(command => command.Destroy().Text("Remove")).Width(100);
           //columns.Command(command => { command.Destroy().Text("Assign/Unassign"); }).Width(100);
       })
        .Sortable(sortable => sortable.AllowUnsort(true))
         .Scrollable(a => a.Height("55vh"))
         .HtmlAttributes(new { style = "width:100%" })
         .Pageable(p => p.Refresh(true).PageSizes( new List<object> {10, 20, "All"}))
         .DataSource(dataSource => dataSource
           .Ajax()
           .PageSize(20)
           .Model(m => m.Id(f => f.ID))
           .Read(read => read.Action("FilesRead", "Client", new { EpisodeId = Model.EpisodeId }))
           .Destroy(update => update.Action("FilesDestroy", "Client"))
           .Events(events => events.Error("error_handler"))
       )
    )
  
    </div>
}
   