
@{
    ViewBag.Title = "Report Viewer";
    Layout = "~/Views/Shared/_LayoutReport.cshtml";
}

@using Telerik.Reporting
@using Telerik.ReportViewer.Mvc
@using Telerik.Reporting.Pats.Reports
@model PATSWebV2.ViewModels.Reports.ReportsViewmodel
@section styles
{
    <script src="~/Scripts/themeSwitcher.js"></script>
    <link href="~/Content/Style/kendo/kendo.common.min.css" rel="stylesheet" id="common-css" />
    <link href="~/Content/Style/kendo/kendo.bootstrap.min.css" rel="stylesheet" id="skin-css" />
    <style>
        body {
            margin: 5px;
            font-family: Verdana, Arial, sans-serif;
        }

        #reportViewer1 {
            position: absolute;
            left: 5px;
            right: 5px;
            top: 110px;
            bottom: 40px;
            overflow: hidden;
            clear: both;
            /*--height:70vh;*/
        }

        #theme-switcher {
            float: right;
            width: 12em;
            height: 25px;
            top: 2px;
        }
    </style>
}

<div id="divApptHeader">
    @section HeaderSection{ @{Html.RenderPartial("_HeaderForAllClients", new PATSWebV2.ViewModels.Client.PersonSearchViewModel()); }}
</div>

<script>
    var maxsize = 10;
    function ChangeParameterSize() {
        var splitter = $("#reportViewer1").find(".k-splitter").data("kendoSplitter")
        splitter.options.panes[2].size = "300px";
        splitter.resize(true);
    }
    function getChecked(event) {
         var items = event.target.parentElement.parentElement.children;
         var counts = 0;
         for(var i =0; i < items.length; i++){
             if (items[i].children.cb.checked) counts++;
         }
         if(counts > maxsize)
         {
            alert("You have reached the maximum allowable selection.");
            event.target.checked = false;
         }
     }
    function createMultiSelectEditor(placeholder, options) {
        var checkInputs = function (elements) {
            var val = multiSelectList.value();
            if (val.length==0){
               return;
            }
            elements.each(function () {
                var element = $(this);
                var input = element.children("input");
                input.prop("checked", element.hasClass("k-state-selected"));
            });
        };

        var multiSelectElement = $(placeholder).html('<div></div>');
        var parameter,
              valueChangedCallback = options.parameterChanged,
              multiSelectList;

        function onChange() {
            var val = multiSelectList.value();
            valueChangedCallback(parameter, val);
        }

        return {
            beginEdit: function (param) {
                parameter = param;
                var plasehold = "Select " + (parameter.name.indexOf("Parameter") >= 0 ? parameter.name.substr(9) :
                                  parameter.name) + " ...";
                plasehold = plasehold.replace('_', ' ');
                $(multiSelectElement).kendoMultiSelect({
                    dataTextField: "name",
                    dataValueField: "value",
                    value: parameter.value,
                    placeholder: plasehold,
                    itemTemplate: "<input type='checkbox' name='cb' value='#:data.value#' id='#:data.value#' onclick='getChecked(event)'/> #:data.name #",
                    dataSource: parameter.availableValues,
                    autoClose: false,
                    maxSelectedItems: maxsize,
                    dataBound: function () {
                        var items = this.ul.find("li");
                        setTimeout(function () {
                            checkInputs(items);
                        });
                    },
                    change: function (e) {
                        var val = multiSelectList.value();
                        if (val.length <= maxsize) {
                            var items = this.ul.find("li");
                            checkInputs(items);
                        }

                        valueChangedCallback(parameter, val);
                    }
                });

                multiSelectList = $(multiSelectElement).data("kendoMultiSelect");
            }
        };
    }
    function createSingleSelectEditor(placeholder, options) {
        var dropDownElement = $(placeholder).html('<div></div>');
        var parameter,
              valueChangedCallback = options.parameterChanged,
              dropDownList;

        function onChange() {
            var val = dropDownList.value();
            valueChangedCallback(parameter, val);
        }

        return {
            beginEdit: function (param) {

                parameter = param;
                var plasehold = "Select " + (parameter.name.indexOf("Parameter") >= 0 ? parameter.name.substr(9) :
                                              parameter.name) + " ...";
                plasehold = plasehold.replace(/_/g, ' ');
                $(dropDownElement).kendoDropDownList({
                    optionLabel: plasehold,
                    dataTextField: "name",
                    dataValueField: "value",
                    value: parameter.value,
                    dataSource: parameter.availableValues,
                    change: onChange
                });

                dropDownList = $(dropDownElement).data("kendoDropDownList");
            }
        };
    }

    function ReloadReport(e) {
        var reportName = e.sender.dataItem().Value;
        var viewer = $("#reportViewer1").data("telerik_ReportViewer");
        viewer.reportSource(
            {
                report: reportName,
            });
    }
</script>

    <div id="headerpane" style="background-color:#ffb630; height:30px;">
        @*<select id="theme-switcher" class="k-dropdown-wrap k-dropdown"></select>*@
        &nbsp;&nbsp;@Html.Label("PATS Reports:", new { style = "float:left;font-weight:bold;margin-top:2px;margin-left:5px;" })
        @(Html.Kendo().DropDownList().Name("AllReports").OptionLabel("Select Report ... ")
                        .DataTextField("Text").DataValueField("Value")
                        .Filter(FilterType.Contains)
                        .SelectedIndex(0).HtmlAttributes(new { style = "width:300px;height:22px!important;" })
                        .BindTo(Model.RptInfo).Events(e => e.Change("ReloadReport")))
    </div>
    <div>
        @(Html.TelerikReporting().ReportViewer()
                                    // initialize the report viewer.
                                    .Id("reportViewer1")
                                    // For more information on how to configure the service please check http://www.telerik.com/help/reporting/telerik-reporting-rest-conception.html.
                                    .ServiceUrl(Url.Content("~/api/reports/"))
                                    .ReportSource(new TypeReportSource() { })  // empty report unless requested
                                                                               // Specifies whether the viewer is in interactive or print preview mode.
                                                                               // PrintPreview - Displays the paginated report as if it is printed on paper. Interactivity is not enabled.
                                                                               // Interactive - Displays the report in its original width and height with no paging. Additionally interactivity is enabled.
                                    .ViewMode(ViewMode.Interactive)
                                    // Sets the scale mode of the viewer.
                                    // Three modes exist currently:
                                    // FitPage - The whole report will fit on the page (will zoom in or out), regardless of its width and height.
                                    // FitPageWidth - The report will be zoomed in or out so that the width of the screen and the width of the report match.
                                    // Specific - Uses the scale to zoom in and out the report.
                                    .ScaleMode(ScaleMode.Specific)
                                    // Zoom in and out the report using the scale
                                    // 1.0 is equal to 100%, i.e. the original size of the report
                                    .Scale(1.0)
                                    // Sets whether the viewer’s client session to be persisted between the page’s refreshes(ex. postback).
                                    // The session is stored in the browser’s sessionStorage and is available for the duration of the page session.
                                    .PersistSession(false)
                                    // Sets the print mode of the viewer.
                                    .PrintMode(PrintMode.AutoSelect)
                //Enables or disables the accessibility features of the report viewer and its contents.
                .EnableAccessibility(false)
                //Determines whether the search metadata will be delivered on demand or by default.
                .SearchMetadataOnDemand(false)
                //If set to true shows the Send Mail Message toolbar button
                //.SendEmail(new SendEmail { Enabled = true })
                //Change the parameters editors type
                .ParameterEditors(editors => editors
                  .SingleSelectEditor("createSingleSelectEditor")
                .MultiSelectEditor("createMultiSelectEditor"))
                // Defers the script initialization statement. Check the scripts section below -
                // each deferred script will be rendered at the place of TelerikReporting().DeferredScripts().
                .Deferred()
        )


        @section scripts
    {
            <script type="text/javascript">
                $(document).ready(function () {
                    //Theme switcher
                    themeSwitcher(
                        '#theme-switcher',
                        '#common-css',
                        '#skin-css');
                });
            </script>

            @(

                        // All deferred initialization statements will be rendered here
                        Html.TelerikReporting().DeferredScripts()
            )
        }
    </div>