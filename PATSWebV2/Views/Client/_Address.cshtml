@using Kendo.Mvc.UI
@using IdentityManagement.Entities
@model PATSWebV2.ViewModels.Client.AddressEditorViewModel

@using (Ajax.BeginForm("GetAddress", "Client", null,
                    new AjaxOptions
                    {
                        HttpMethod = "Post",
                        UpdateTargetId = "viewPlaceHolder",
                        InsertionMode = InsertionMode.Replace,
                        OnSuccess = "OnAjaxSuccess"
                    },
                new { @id = "addressform", @name = "Address", @style = "min-height: 56vh;", @class = "color-primary" }))
{
    @Html.HiddenFor(m => m.EpisodeId, new { id = "hdEpisodeID" })
    @Html.HiddenFor(m => m.CanEditAddress, new { id = "hdCanEditAddress" })
    @Html.HiddenFor(m => m.FromCM, new { @id = "hdFromCM" })
    @Html.ValidationSummary(false)
   
        <script>
          $("#EffectiveDate").kendoValidator({
              rules: {
                  dateValidation: function (e) {
                      var currentDate = kendo.parseDate($(e).val());
                      // Check if date parse was successful
                      if (!currentDate) {
                          return false;
                      }
                      return true;
                  }
              },
              messages: {
                  dateValidation: "Invalid Date!"
              }
          });

          $('#addressform').on('click', '.textareaforcasemanngement', function (e) {
              TextarePopup(e, false, "color-primary");
          });
          $('#addressform').on('keypress', '.textareaforcasemanngement', function (ev) {
              var keycode = (ev.keyCode ? ev.keyCode : ev.which);
              if (keycode == '10' && ev.ctrlKey) {
                  $(this).trigger('click');
              }
          })
          function addr_error_handler(e) {
              if (e.errors) {
                  var message = "Errors:\n";
                  $.each(e.errors, function (key, value) {
                      if ('errors' in value) {
                          $.each(value.errors, function () {
                              message += this + "\n";
                          });
                      }
                  });

                  alert(message);
                  var grid = $("#gridAddress").data("kendoGrid");
                  grid.one("dataBinding", function (e) {
                      e.preventDefault();   // cancel grid rebind if error occurs
                  });
              }
          }

          function insertHeaderCaption(e) {
              if (e.model.isNew()) {
                  $('.k-window-title').text("Add New Address");
              }
              //IssuedOnDate
              var effectivedate = $("#EffectiveDate");
              effectivedate.kendoMaskedTextBox({
                  mask: "00/00/0000"
              });
              effectivedate.closest(".k-datepicker")
              .add(effectivedate)
              .removeClass("k-textbox");
          }

          function AddressGridData(data) {
              data.EpisodeID = $("#hdEpisodeID").val();
              data.AddressTypeID = $("#AddressTypeID").val();
              data.FacilityName = $("#txtFacilityName").val();
              data.AddressLivingSituationID = $("#AddressLivingSituationID").val();
              data.StreetAddress = $("#txtStreetAddress").val();
              data.City = $("#City").val();
              data.State = $("#State").val();
              data.ZIPCode = $("#txtZip").val();
              data.EffectiveDate = $("#EffectiveDate").val();
              data.Inactive = $("#Inactive").prop("checked");
              data.AddressDetails = $("#txtAddressDetails").val();
              data.PrimaryNumber = $("#txtPrimaryNumber").val();
              data.SecondaryNumber = $("#txtSecondaryNumber").val();
              data.FaxNumber = $("#txtFaxNumber").val();
          }
          function hiddenColumn(e) {
              var typeId = e.sender._data[0].AddressTypeID;
              var grid = $("#grid_" + typeId.toString()).data("kendoGrid");
              if (typeId != 1) {
                  grid.hideColumn(0);
              }
              else {
                  grid.showColumn(0);
              }
          }
          function dataBound() {
              var edit = EditableEpisode($("#hdCanEditAddress").val());
              if (!edit)
                  $(".k-grid-add").removeClass("k-grid-add")
                                     .addClass("k-state-disabled")
                                     .removeAttr("href");
                  var grid = this;
                  grid.tbody.find("tr[role='row']").each(function () {
                  var model = grid.dataItem(this);
                  if (model.UpdateExpired || !edit) {
                      $(this).find(".k-grid-edit").hide();
                  }
                  if (!edit) {
                      $(this).find(".k-grid-delete").hide();
                  }
                  if (model.Totals == 1)
                      $(this).find(".k-i-expand").hide();
              });
              grid.thead.find('th').each(function () {
                  $(this).prop('title', $(this).data('title'));
              })
          }
          function beforesaveaddr(e) {
              e.model.EffectiveDate = $("#EffectiveDate").val();
              e.model.EpisodeID = $("#hdEpisodeID").val();
              e.model.AddressTypeID = $("#AddressTypeID").val();
              e.model.FacilityName = $("#txtFacilityName").val();
              if ($("#AddressTypeID").val() == 1 && $("#AddressLivingSituationID").val() == 0)
              {
                  alert("must select a Living Situation.");
              }
              if (confirm("Are you sure you want to save the address?") == false) {
                  e.preventDefault();
                  return;
              }
              e.model.AddressLivingSituationID = $("#AddressLivingSituationID").val();
              e.model.StreetAddress = $("#txtStreetAddress").val();
              e.model.City = $("#City").val();
              e.model.State = $("#State").val();
              e.model.ZIPCode = $("#txtZip").val();
              e.model.Inactive = $("#Inactive").prop("checked");
              e.model.AddressDetails = $("#txtAddressDetails").val();
              e.model.PrimaryNumber = $("#txtPrimaryNumber").val();
              e.model.SecondaryNumber = $("#txtSecondaryNumber").val();
              e.model.FaxNumber = $("#txtFaxNumber").val();
              return e.model;
          }
          function GetAddrParam()
          {
              return { EpisodeID: $("#AllSelectedOffenderEpisodeResult").val() == "" ? -1 : $("#AllSelectedOffenderEpisodeResult").val() };
          }
          function GetAddrSubParam(obj) {
              return { EpisodeID: $("#AllSelectedOffenderEpisodeResult").val(), AddressTypeID: obj };
          }
          function GridAddrReload(e) {
              if (e.type != "read")
                  $("#gridAddress").data('kendoGrid').dataSource.read({ EpisodeID: $("#hdEpisodeID").val() })
          }
        </script>
        @(Html.Kendo().Grid<Address>()
                .Name("gridAddress")
                .NoRecords("No Address Found.")
                .Columns(columns =>
                {
                    columns.Bound(p => p.ID).Hidden();
                    columns.Bound(p => p.AddressTypeID).Hidden();
                    columns.Bound(p => p.AddressLivingSituationID).Hidden();
                    columns.Bound(p => p.ZIPCode).Hidden();
                    columns.Bound(p => p.City).Hidden();
                    columns.Bound(p => p.AddressTypeName).Title("Address Type").Width(100).HtmlAttributes(new { @style = "line-height:14px!important;" });
                    columns.Bound(p => p.LivingSituationDesc).Title("Living Situation").HtmlAttributes(new { @style = "line-height:14px!important;" }).Width(100);
                    columns.Bound(p => p.FacilityName).Title("Facility Name").Width(100).HtmlAttributes(new { @style = "line-height:14px!important;" });
                    columns.Bound(p => p.StreetAddress).Title("Address").Width(100).HtmlAttributes(new { @style = "line-height:14px!important;" });
                    columns.Bound(p => p.City).Title("City").Width(60).HtmlAttributes(new { @style = "line-height:14px!important;" });
                    columns.Bound(p => p.State).Title("State").Width(40).HtmlAttributes(new { @style = "line-height:14px!important;" });
                    columns.Bound(p => p.ZIPCode).Title("Zip").Width(50).HtmlAttributes(new { @style = "line-height:14px!important;" });
                    columns.Bound(p => p.AddressDetails).Title("Address Details/Notes").ClientTemplate("<textarea class='textareaforcasemanngement' placeholder = 'Add new details/notes here...' readonly='readonly' style='border-style:none;background-color:transparent!important;'>#if(AddressDetails == null) {# #=''# #} else {#  #=AddressDetails # #} #</textarea>")
                                                            .Width(250).HtmlAttributes(new { @style = "line-height:12px!important;" });
                    columns.Bound(p => p.EffectiveDate).Title("Effective Date").Format("{0:MM/dd/yyyy}").Width(80);
                    columns.Bound(p => p.PrimaryNumber).Title("Primary #").Width(80).HtmlAttributes(new { @style = "white-space:nowrap;" });
                    columns.Bound(p => p.SecondaryNumber).Title("Secondary #").Width(80).Sortable(false).HtmlAttributes(new { @style = "white-space:nowrap;" });
                    columns.Bound(p => p.FaxNumber).Title("Fax #").Width(80).Sortable(true).HtmlAttributes(new { @style = "white-space:nowrap;" });
                    columns.Bound(p => p.Inactive).Title("Inactive?").ClientTemplate("<input type='checkbox' #= Inactive ? checked='checked' :'' # disabled='disabled'/>").Width(40);
                    columns.Bound(p => p.DateAction).Format("{0:MM/dd/yyyy}").Title("Entry Date").Width(80);
                    columns.Bound(p => p.ActionStatus).Hidden();
                    columns.Command(command => { command.Edit(); command.Destroy(); }).Width(160);
                })
        .ToolBar(toolbar =>
        {
            { toolbar.Create().Text("Add New Address").HtmlAttributes( new { @style="background-color:yellow;"}); }
        })
        .ToolBar(toolbar => toolbar.Excel().Text("Export To Excel")).Excel(exl => exl.FileName("Address.xlsx").Filterable(true).AllPages(true))
        .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("_GridAddressTemplate").Window(w => w.Title("Edit Address").Width(800).Height(375).Resizable()))
        .Events(e => { e.Edit("insertHeaderCaption"); e.DataBound("dataBound"); e.Save("beforesaveaddr"); })
     .ClientDetailTemplateId("addresstemplate")
     .HtmlAttributes(new { @style = "min-width:60%; min-height:50%; padding:0px;" })
     .Scrollable(s => s.Height("55vh").Virtual(true))
     .Sortable(sortable => sortable.AllowUnsort(false))
     .Resizable(resize => resize.Columns(true))
     .Pageable(pageable => pageable
          .Refresh(true)
          .PageSizes(new List<object> { 5, 10, 20, 30, 50 })
          .ButtonCount(5))
    .DataSource(dataSource => dataSource
        .Ajax()
        .Sort(s => { s.Add("DateAction").Descending(); })
        .ServerOperation(false)
        .PageSize(10)
        .Events(events => { events.Error("addr_error_handler"); events.RequestEnd("GridAddrReload"); })
        .Create(create => create.Action("AddressCreate", "Client").Data("AddressGridData"))
        .Read(read => read.Action("AddressRead", "Client").Data("GetAddrParam"))
        .Update(update => update.Action("AddressUpdate", "Client").Data("AddressGridData"))
        .Destroy(destroy => destroy.Action("AddressDestroy", "Client"))
        .Model(model =>
        {
            model.Id(g => g.ID);
            model.Field(field => field.AddressTypeID).DefaultValue(0);
            model.Field(field => field.AddressLivingSituationID).DefaultValue(0);
            model.Field(field => field.EffectiveDate).DefaultValue(DateTime.Now);
            model.Field(field => field.Inactive).DefaultValue(false);
            model.Field(field => field.State).DefaultValue("CA");
        })))
        <script id="addresstemplate" type="text/kendo-tmpl">
            @(Html.Kendo().Grid<Address>()
           .Name("grid_#=AddressTypeID#")
           .Resizable(r => r.Columns(true)).HtmlAttributes(new { style = "width:99%;" })
           .Events(e => e.DataBound("hiddenColumn"))
           .Columns(columns =>
           {
               columns.Bound(s => s.LivingSituationDesc).Title("Living Situation").Width(150).HtmlAttributes(new { style = "line-height:14px!important;" });
               columns.Bound(s => s.FacilityName).Title("Facility Name").Width(150).HtmlAttributes(new { style = "line-height:14px!important;" });
               columns.Bound(s => s.StreetAddress).Title("Address").Width(250).HtmlAttributes(new { style = "line-height:14px!important;" });
               columns.Bound(s => s.AddressDetails).Title("Address Details/Notes").ClientTemplate("<textarea class='textareaforcasemanngement' placeholder = 'Add new details/notes here...' readonly='readonly' style='border-style:none;background-color:transparent!important;'>\\#if(AddressDetails == null) {\\# \\#=''\\# \\#} else {\\#  \\#=AddressDetails \\# \\#} \\#</textarea>").Width(400).HtmlAttributes(new { @style = "line-height:14px!important;" });
               columns.Bound(s => s.EffectiveDate).Title("Effective Date").Format("{0:MM/dd/yyyy}").Width(80);
               columns.Bound(s => s.PrimaryNumber).Title("Primary \\#").Width(110).HtmlAttributes(new { @style = "line-height:14px!important;white-space:nowrap;" });
               columns.Bound(s => s.SecondaryNumber).Title("Secondary \\#").Width(110).HtmlAttributes(new { @style = "line-height:14px!important;white-space:nowrap;" });
               columns.Bound(s => s.FaxNumber).Title("Fax \\#").Width(110).HtmlAttributes(new { @style = "line-height:14px!important;white-space:nowrap;" });
               columns.Bound(s => s.Inactive).Title("Inactive?").ClientTemplate("<input type='checkbox' disabled='disabled' \\#=Inactive ? checked='checked' :'' \\# />").Width(50);
               columns.Bound(s => s.DateAction).Format("{0:MM/dd/yyyy}").Title("Entry Date").Width(100);
               columns.Bound(s => s.ActionStatus).Title("Status").Width(100);
           }).DataSource(dataSource => dataSource
                     .Ajax()
                     .PageSize(5)
                     .Read(read => read.Action("HierarchyBinding_Address", "Client").Data("GetAddrSubParam(#=AddressTypeID#)"))
                  ).Pageable()
                  .Sortable()
                  .Scrollable()
                  .ToClientTemplate()
            )

        </script>
}




