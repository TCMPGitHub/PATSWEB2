@model PATSWebV2.ViewModels.Client.CaseNoteViewModel

@*@using (Ajax.BeginForm("SaveCaseNote", "Clinical", null, new AjaxOptions
    {
        HttpMethod = "Post",
        UpdateTargetId = "viewPlaceHolder",
        InsertionMode = InsertionMode.Replace,
        OnSuccess = "OnAjaxSuccess"
    }, new { @id = "clinicalnoteform", @name = "Clinical Note", @style = "min-height: 500px;", @class = "color-danger" }))
    {*@
<style>
    .k-edit-form-container {
        width: 85vw !important;
        height: 60vh !important;
    }

    .k-popup-edit-form {
        width: 100% !important;
        height: 100% !important;
        padding: 10px;
        resize: both;
    }

        .k-popup-edit-form k-window-content k-content {
            width: 100% !important;
            height: 95% !important;
        }

        .k-popup-edit-form .k-edit-field {
            width: 98% !important;
        }

        .k-popup-edit-form .k-edit-buttons {
            width: 100% !important;
            height: 30px;
            position: page;
            padding: 0px !important;
            display: none;
        }
</style>

<script>
    WaitDialog(0);
</script>
@{ var color = (Model.ActionModel == "PSY" ? "color-warning" : "color-danger"); }
<div id="cmnotepane" class="k-content gridScrollBar @color">    
    @Html.HiddenFor(m => m.EpisodeId)
    @Html.HiddenFor(m => m.CanEdit, new { @id = "hdEditable" })
    @Html.HiddenFor(m=>m.ActionModel, new { @id= "hdActionModel" } )
    @*<h6 style="float:left;margin-left:10px;margin-top:5px">&nbsp;&nbsp;@Model.NoEditAllowed</h6><br />*@
    <script>
        
        function TextAreaClick(e) { TextarePopup(e, false, ($("#hdActionModel").val() == "PSY" ? "color-warning" : "color-danger")); }
        function TextArearKeyUp(e) { //key : Z
            if (e.keyCode == '90' && e.ctrlKey) {
                TextarePopup(e, false, ($("#hdActionModel").val() == "PSY" ? "color-warning" : "color-danger"));
            }
        }
      
       @*$(".k-grid-excel").after((@Model.CanEdit ? "" : "<i><scan style='color:darkgoldenrod;font-size:x-small'>You do not have permission to edit.</scan></i>" ));*@
        function dataBound(e) {
            var edit = EditableEpisode($("#hdEditable").val());
            if (!edit){
                $(".k-grid-add").removeClass("k-grid-add")
                                   .addClass("k-state-disabled")
                                   .removeAttr("href");
                $(".k-grid-excel").after("<i><scan style='color:darkgoldenrod;font-size:x-small'>You do not have permission to edit.</scan></i>");
            }
            var grid = this;
            grid.tbody.find("tr[role='row']").each(function () {
                var model = grid.dataItem(this);
                if (model.Note != null && model.Note.length > 0) {
                    model.Note = (model.Note.split('&lt;').join("<")).split('&gt;').join(">");
                }
                if (model.UpdateExpired || !edit) {
                    $(this).find(".k-grid-edit").hide();
                }
                if (!edit) {
                    $(this).find(".k-grid-delete").hide();
                }
                //T68921
                if (model.Id == model.CaseNoteId)
                    $(this).find(".k-i-expand").hide();
            });

            //DisableAllInputFields("#fileuploadpane :input", edit);
        }
        function insertPopupCaption(e) {
            if (e.model.isNew()) {
                $('.k-window-title').text("Add New Note");
            }
        }
        function clinic_error_handler(e) {
            if (e.errors) {
                var message = "Errors:\n";
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                });

                alert(message);
                var grid = $("#gridClinicNote").data("kendoGrid");
                grid.one("dataBinding", function (e) {
                    e.preventDefault();   // cancel grid rebind if error occurs
                });
            }
        }
        function SaveNote(e) {          
            if (e.model.CaseNoteTypeId == 0) {
                alert("Note type is requested.")
                e.preventDefault();
                return false;
            }
            if (e.model.Note != null && e.model.Note.length > 0) {
                var len = e.model.Note.length;
                var newLines = e.model.Note.match(/(\r\n|\n|\r)/g);
                var addition = 0;
                if (newLines != null) {
                    len = len + newLines.length;
                }
                if (len > 5000) {
                    alert("The field Note must be a string with a maximum length of 5000.");
                    e.preventDefault();
                }
            }
            if (confirm("Are you sure you want to save the case note?") == false) {
                e.preventDefault();
                return;
            }
        }
        function RefreshNoteGrid(e) {
            if (e.type != "read") {
                var grid = $("#gridClinicNote").data("kendoGrid");
                grid.dataSource.read();
                grid.refresh();
            }
        }
    </script>
    @(Html.Kendo().Grid<IdentityManagement.Entities.CaseNoteData>()
        .Name("gridClinicNote")
        .Columns(columns =>
        {
            columns.Bound(o => o.Id).Hidden();
            columns.Bound(o => o.CaseNoteId).Hidden();
            columns.Bound(p => p.CaseNoteTypeId).Hidden();
            columns.Bound(p => p.CaseContactMethodID).Hidden();
            columns.Bound(p => p.UpdateExpired).Hidden();
            columns.Bound(p => p.DateAction).Title("Entered Date").Width(120).Format("{0:MM/dd/yyyy hh:mm tt}");
            columns.Bound(p => p.CaseNoteType).Title("Type").Width(100);
            columns.Bound(p => p.CaseContactMethod).Title("Contact Method").Width(100);
            columns.Bound(p => p.Note).Width(300).Title("Note").ClientTemplate(@"<textarea class='textareaforcasemanngement' 
                    placeholder = 'Add new note here...' readonly='readonly' style='border:none;background-color:transparent!important;' 
                    ondblClick='TextAreaClick(event)' onKeyup='TextArearKeyUp(event)'>#= Note #</textarea>")
                    .HtmlAttributes(new { style = "line-height:14px!important;" });
            columns.Bound(p => p.ActionByName).Title("Entered By").Width(100);
            columns.Bound(p => p.Id).Title("Print Note").ClientTemplate(
                        "<a href='javascript:printPATSPDF(\"" + Model.EpisodeId + "\",\"#=Id#\", \"Clinician Note\",\"color-danger\")'>Print</a>").Width(50).Filterable(false);
            columns.Command(command => { command.Edit().Text("Edit"); }).Width(120).Visible(Model.CanEdit);

        })
        .ToolBar(toolbar => { if (Model.CanEdit) { toolbar.Create().Text("Add New Note").HtmlAttributes( new { style= "height:22px;background-color:yellow;" }); } })
        .ToolBar(tools => { tools.Excel().HtmlAttributes(new { style = "height:22px;" }); })
        .Excel(excel => excel
        .FileName("ClinicalNote.xlsx")
        .Filterable(true)
        .AllPages(true)
        //.ProxyURL(Url.Action("EvaluationToExcel", "Evaluation"))
        )
        .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("_NewCMNote").Window(w => { w.Title("Edit Note"); }))
        .Events(events => { events.Edit("insertPopupCaption"); events.Save("SaveNote"); events.DataBound("dataBound"); })
        .Sortable(sortable => sortable.AllowUnsort(true))
        .Scrollable(a => a.Height("55vh"))
        .Navigatable()
        .HtmlAttributes(new { style = "width:99.8%;margin-top:5px;" })
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(new List<object> { 5, 10, 20, 30, 50 })
        .ButtonCount(5))
        .ClientDetailTemplateId("notetemplate")
        .EnableCustomBinding(true)
        .Filterable(filterable => filterable
        .Extra(false)
        .Operators(operators => operators
            .ForString(str => str.Clear()
            .StartsWith("Starts with")
            .IsEqualTo("Is equal to")
            .IsNotEqualTo("Is not equal to")
            ))
        )
        .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .ServerOperation(false)
        .Events(events => { events.Error("clinic_error_handler"); events.RequestEnd("RefreshNoteGrid"); })
        .PageSize(20)
        .Model(model =>
        {
            model.Id(f => f.Id);
            model.Field(f => f.CaseNoteTypeId);
            model.Field(f => f.CaseContactMethodID);
        })
        .Create(create => create.Action("CaseNoteCreate", "Client", new { EpisodeId = Model.EpisodeId, ActionModel = Model.ActionModel }).Type(HttpVerbs.Post))
        .Update(update => update.Action("CaseNoteUpdate", "Client", new { EpisodeId = Model.EpisodeId, ActionModel = Model.ActionModel }).Type(HttpVerbs.Post))
        .Read(read => read.Action("CaseNoteRead", "Client", new { EpisodeId = Model.EpisodeId, ActionModel = Model.ActionModel }))
        .Destroy(destroy => destroy.Action("CaseNoteDestroy", "Client").Type(HttpVerbs.Post))
                  )
    )
    <script id="notetemplate" type="text/kendo-tmpl">
        @(Html.Kendo().Grid<IdentityManagement.Entities.CaseNoteHistory>()
            .Name("grid_#=CaseNoteId#") // template expression, to be evaluated in the master context
            .HtmlAttributes(new { style = "width:99%" })
            .Columns(columns =>
            {
                columns.Bound(o => o.DateAction).Format("{0:MM/dd/yyyy hh:mm tt}").Title("Entered Date").Width(100);
                columns.Bound(o => o.CaseNoteType).Width(100);
                columns.Bound(o => o.CaseContactMethod).Width(100);
                columns.Bound(o => o.HisNote).ClientTemplate("<textarea class='textareaforcasemanngement'  readonly='readonly' style='border-style:none;background-color:transparent!important;'>\\#= HisNote \\#</textarea>").Title("HisNote").HtmlAttributes(new { style = "line-height:14px!important;background-color:transparent!important;padding:0px;white-space:normal!important;" }).Width(400);
                columns.Bound(o => o.ActionByName).Width(100).Title("Entered By");
            })
            .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(10)
                .Read(read => read.Action("HierarchyBinding_Note", "Client", new { CaseNoteId = "#=CaseNoteId#" }))
            )
            .Pageable()
            .Sortable()
            .Scrollable()
            .Resizable(r=>r.Columns(true))
            .ToClientTemplate()
        )
    </script>
</div>

@*}*@


