@model PATSWebV2.ViewModels.LegalDocument.LegalDocumentViewModel
@using (Ajax.BeginForm("SaveLegalDocument", "Client", null, new AjaxOptions
{
    HttpMethod = "Post",
    UpdateTargetId = "divLegalDoc",
    InsertionMode = InsertionMode.Replace,
    OnSuccess = "OnAjaxSuccess"
}, new
{
    @id = "legaldocumentform",
    @name = "Legal Document",
    @style = "min-height: 500px;",
    @class = "color-success"
}))
{
    <div id="divLegalDoc" class="color-success">
        @Html.HiddenFor(m => m.EpisodeId)
        @Html.HiddenFor(m => m.CanEdit, new { @id = "hdEditable" })
        @Html.HiddenFor(m => m.legDoc.IsLastOne, new { @id = "hdIsLastOne" })
        @if (!Model.CanEdit)
        {
            <h5 style="margin-left:10px;margin-top:5px;">
                <i><scan style="color:darkgreen;font-size:x-small">You don't have edit permission...</scan></i>
            </h5>
        }

      <fieldset class="fieldset" style="padding:10px; height:95%">
        <table id="grid" class="table table-condensed" style="background-color:transparent;padding:0">
          <tr>
            <td width="28%">
                <script>
                function ExpireDateChanged(e) {
                    if (e.sender.element[0].value.length == 0) {
                        RemoveSubmitValidation();
                    }
                    else{
                        AddSubmitValidation();
                    }
                    }
                </script>
                @Html.Label("Privacy Practices Notice Date:")
                @(Html.Kendo().DatePickerFor(m => m.legDoc.DateNoticePrivacyPractice).Format("MM/dd/yyyy").HtmlAttributes(new
            {
                @id = "DateNoticePrivacyPractice",
                @style = "width:130px;z-index:1;",
                @class = "docdp",
                @value = Model.legDoc.DateNoticePrivacyPractice == (DateTime?)null ? "" : Model.legDoc.DateNoticePrivacyPractice.Value.ToShortDateString()
            }))
            </td>
            <td width="33%">
                @Html.Label("Informed Consent for Treatment Date:")
                @(Html.Kendo().DatePickerFor(m => m.legDoc.DateInformedConcentForTreatment).Format("MM/dd/yyyy").HtmlAttributes(new
            {
                @id = "DateInformedConcentForTreatment",
                @style = "width:130px;",
                @class = "docdp",
                @value = Model.legDoc.DateInformedConcentForTreatment == (DateTime?)null ? "" : Model.legDoc.DateInformedConcentForTreatment.Value.ToShortDateString()
            }))
                </td>
            <td width="32%">&nbsp;&nbsp;&nbsp;&nbsp;
                @Html.Label("Release Information Expiration date:")
                @(Html.Kendo().DatePickerFor(m => m.legDoc.DateReleaseInfoExpiration).Format("MM/dd/yyyy").HtmlAttributes(new
            {
                @id = "DateReleaseInfoExpiration",
                @style = "width:130px;",
                @class = "docdp",
                @value = Model.legDoc.DateReleaseInfoExpiration == (DateTime?)null ? "" : Model.legDoc.DateReleaseInfoExpiration.Value.ToShortDateString()
            })
.Events(evt => { evt.Change("ExpireDateChanged"); }))
                </td>
         </tr>
         <tr><td height="10"></td></tr>
         <tr>
            <td colspan="3">
              <table>
                <tr>
                  <td width="230">&nbsp;&nbsp;&nbsp;&nbsp;@Html.Label("Other Documentation Name:")</td>
                  <td>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                      @(Html.Kendo().TextBoxFor(m => m.legDoc.OtherDdesc).HtmlAttributes(new
                                                {
                                                    @class = "fillwidth",
                                                    @placeholder = "Other...",
                                                    @spellcheck = true,
                                                    @id = "txtOtherDesc",
                                                    @style = "width:300px;text-align: left;float:left",
                                                    @MaxLength = 255,
                                                    onkeypress = "IgnoreEnterKey(event)"
                                                }))
                    @Html.ValidationMessageFor(m => m.legDoc.OtherDdesc)
                </td>
                <td>
                    @Html.Label("Date:")
                    @(Html.Kendo().DatePickerFor(m => m.legDoc.DateOther).Format("MM/dd/yyyy").HtmlAttributes(new
                {
                    @id = "DateOther",
                    @style = "width:140px;",
                    @class = "docdp",
                    @value = Model.legDoc.DateOther == (DateTime?)null ? "" : Model.legDoc.DateOther.Value.ToShortDateString()
                }))
                </td>
            </tr>
              </table>
            </td>
         </tr>
         <tr><td height="10"></td></tr>
         <tr>
            <td colspan="3">
              <table>
                <tr>
                    <td width="230">
                        @Html.Label("Additional Release Information:")
                    </td>
                    <td width="1000">
                        @Html.TextAreaFor(m => m.legDoc.ReleaseInformationsNote, new
                    {
                        @class = "textareaforcasemanngement txtValid",
                        @placeholder = "Release Information ...",
                        @id = "txtRelease",
                        @style = "margin-left:0px;maxlength:500",
                        title = this.Model.legDoc.ReleaseInformationsNote
                    })
                        @Html.ValidationMessageFor(m => m.legDoc.ReleaseInformationsNote, "", new { @class = "text-danger" })
                    </td>
                </tr>
            </table>
           </td>
         </tr>
         <tr><td height="10"></td></tr>
         <tr>
            <td colspan="3">&nbsp;
            @Html.Label("To:")&nbsp;&nbsp;&nbsp;
            @(Html.Kendo().TextBoxFor(m => m.legDoc.ReleaseTo)
                  .HtmlAttributes( new { @style = "width:400px", @spellcheck = "true",
                      @placeholder = "Release to...", @id = "txtReleaseTo",
                      @MaxLength = 255, @class = "txtValid", onkeypress = "IgnoreEnterKey(event)" }))
            @Html.ValidationMessageFor(m => m.legDoc.ReleaseTo, "", new { @class = "text-danger" })
            &nbsp;&nbsp;
            @Html.Label("From:")&nbsp;&nbsp;
            @(Html.Kendo().TextBoxFor(m => m.legDoc.ReleaseFrom)
                  .HtmlAttributes(new { @style = "width:400px", @spellcheck = "true",
                      @placeholder = "Release from...", @id = "txtReleaseFrom",
                      @MaxLength = 255, @class = "txtValid", onkeypress = "IgnoreEnterKey(event)" }))
            @Html.ValidationMessageFor(m => m.legDoc.ReleaseFrom, "", new { @class = "text-danger" })
            &nbsp;&nbsp;
            @if (Model.CanEdit)
            {
                <button type="submit" class="btn btn-group-lg success-button" id="checklistSave">Submit</button>
            }&nbsp; &nbsp;
            <button type="button" class="btn btn-group-lg success-button" id="checklistCancel">Cancel</button>&nbsp;&nbsp;
            <button type="button" class="btn btn-group-lg success-button" id="checklistReset">Reset</button>
        </td>
    </tr>
</table>
        </fieldset>
        <br />
        <script>
            $('#legaldocumentform').on('dblclick', '.textareaforcasemanngement', function (e) {
                var edit = ($("#hdIsLastOne").val() == "True" && EditableEpisode($("#hdEditable").val()));
                TextarePopup(e, edit, "color-success");
            });
            $('#legaldocumentform').on('keyup', '.textareaforcasemanngement', function (e) {
                if (e.keyCode == '90' && e.ctrlKey) {
                    $(this).trigger('dblclick');
                }
            })
            function GetParamerts(obj) {
                return { EpisodeId: obj.EpisodeId, DocId: obj.Id }
            }
            function Grid_OnRowSelect(e) {
                var docData = this.dataItem(this.select());
                var selectedId = docData.id;
                reloadform(docData.id)
            }
            function reloadform(id){
                $.ajax({
                    url: "@Url.Action("GetLegalDocumentCheckList", "Client")",
                    data: { EpisodeId: $("#AllSelectedOffenderEpisodeResult").val(), DocId: id },
                    type: "POST",
                    dataType: "html",

                    success: function (data, textStatus, XMLHttpRequest) {
                        $("#legaldocumentform").replaceWith(data); // HTML DOM replace
                    },
                    error: function (data, textStatus, XMLHttpRequest) {
                        alert(textStatus + " load legal document.")
                    }
                });
            }
            function requestEnd(e) {
                if (e.type === "destroy") {
                    reloadform(-1)
                }
            }
        </script>
        
        &nbsp;&nbsp;@Html.Label("Legal Document History:")
        @(Html.Kendo().Grid<IdentityManagement.Entities.LegalDocumentData>().Name("gridLglDoc")
        .NoRecords("No Data found.")
        .HtmlAttributes(new { style = "margin-left:5px;" })
        .Selectable()
        .Events(events => events.Change("Grid_OnRowSelect"))
           .Columns(column =>
           {
               column.Bound(m => m.Id).Hidden();
               column.Bound(m => m.EpisodeId).Hidden();
               column.Bound(m => m.DateReleaseInfoExpiration).Title("Release Expiration Date").Width(140)
                    .ClientTemplate("#= DateReleaseInfoExpiration ? kendo.toString(kendo.parseDate(DateReleaseInfoExpiration), 'MM/dd/yyyy') : '' #");
               column.Bound(m => m.ReleaseInformationsNote).Title("Addition Release Information").Width(300);
               column.Bound(m => m.ReleaseTo).Title("Release To");
               column.Bound(m => m.ReleaseFrom).Title("Release From");
               column.Bound(m => m.ActionByName).Title("Entered By");
               column.Command(command => { command.Destroy().Text("Delete"); }).Width(120).Visible(Model.CanEdit);
           }).DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(10)
                .Read(read => read.Action("LegalDocRelease_read", "Client", new { EpisodeId = Model.EpisodeId }))
                .Destroy(destroy => destroy.Action("LegalDocRelease_Destroy", "Client").Data("GetParamerts"))
                .Events(evt=> evt.RequestEnd("requestEnd"))
                .Model(model =>
                {
                    model.Id(f => f.Id);
                    model.Field(p => p.EpisodeId);
                })
               )
               .Pageable()
               .Sortable()
               .Scrollable(s => s.Height("33vh"))
        )
        <br />
    </div>
}

<script>
    function LEGALDOCButtonDisable(disabled) {
        $("#checklistSave").prop('disabled', disabled);
        $("#checklistCancel").prop('disabled', disabled);
        $("#checklistReset").prop('disabled', disabled);
    }
        $(function () {
            var initdata = $('#legaldocumentform').serialize();             
            $('#legaldocumentform').submit(function (e) {
                e.preventDefault();
                var nowdata = $('#legaldocumentform').serialize();
                if (initdata === nowdata) {
                    NotifyMessage();
                    e.stopPropagation();
                    return false;
                }
                else {
                    if ($("#DateReleaseInfoExpiration").val() != "") {
                        var msg = AddSubmitValidation();
                        if (msg.length > 0) {
                            alert(msg);
                            e.stopPropagation();
                            return false;
                        }
                    }
                    if (confirm("Are you sure you want to save this Legal Document?") == false) {
                        e.stopPropagation();
                        return false;
                    }
                    initdata = nowdata;
                    LEGALDOCButtonDisable(true);
                    postFormAndReplaceDivHtmlPats($('#legaldocumentform'));
                    var tabstrip = $("#lDocTabstrip").data("kendoTabStrip");
                    var tab = tabstrip.select();
                    tabstrip.reload(tab);
                    return true;
                }
            });
            $("#legaldocumentform :input").change(function (e) {
                var nowdata = $('#legaldocumentform').serialize();
                if (initdata === nowdata) {
                    LEGALDOCButtonDisable(true);
                }
                else {
                    LEGALDOCButtonDisable(false);
                }
            });
        })

        function AddSubmitValidation(){
            var message = "";
            if ($("#txtRelease").val() == "") {
                message="Release Information is required.\n";
            }
            if ($("#txtReleaseTo").val() == "") {
                message=message + "Release To is required.\n";
            }
            if ($("#txtReleaseFrom").val() == "") {
                message = message + "Release From is required.";
            }
            return message;
        }

        function RemoveSubmitValidation(){
            $('#legaldocumentform').validate().settings.ignore = '.valid';
            $('input').addClass('valid').removeClass("error");
            $('textarea').addClass('valid').removeClass("error");
            var eleFrom = document.getElementById("txtReleaseFrom-error");
            if (eleFrom != null && eleFrom != undefined)
                eleFrom.style.display = "none";
            var eleTo = document.getElementById("txtReleaseTo-error");
            if (eleTo != null && eleTo != undefined)
                eleTo.style.display = "none";

            var eleInfo = document.getElementById("txtRelease-error");
            if (eleInfo != null && eleInfo != undefined)
                eleInfo.style.display = "none";
        }
        
        $(".docdp").kendoValidator({
            rules: {
                dateValidation: function (element) {
                    $(this).removeClass('field-validation-error');
                    $(this).parent().find('span[data-valmsg-for]').remove();
                    if (element.is("[data-val-date]") && element.val() != "") {
                        var value = $(element).val();
                        return is_valid_date(value);
                    }
                    return true;
                }
            },
            messages: {
                dateValidation: "must be a valid date",
            }
        });
        $(".docdp ").kendoMaskedTextBox({
            mask: "00/00/0000"
        });
        $(".docdp").closest(".k-datepicker")
                  .add($(".docdp"))
                  .removeClass("k-textbox")

        $("body").on('change', 'select', function (ev) {
            if ($(this).find('option:selected').val() == "0") {
                $(this).css('color', '#999');
                $(this).children().css('color', 'black');
            }
            else {
                $(this).css('color', 'black');
                $(this).children().css('color', 'black');
            }
        });

        $("#checklistReset").click(function () {
            $("#legaldocumentform :input").each(function () {
                if (this.type == "checkbox")
                    $(this).prop('checked', false);

                if (this.type == "text" || this.type == "textarea") {
                    $(this).val('');
                }
            })
        });

        $("#checklistCancel").click(function () {
            document.getElementById("legaldocumentform").reset();
            LEGALDOCButtonDisable(true);
            $("#legaldocumentform :input").each(function () {
              if (this.type == "text" || this.type == "textarea") {
                  $(this).prop("disabled", "");
                }
            })
        })
       
        var edit = ($("#hdIsLastOne").val() == "True" && EditableEpisode($("#hdEditable").val()));
        DisableAllInputFields("#legaldocumentform :input", (edit ? "True" : "False"));
        LEGALDOCButtonDisable(true);
</script>

